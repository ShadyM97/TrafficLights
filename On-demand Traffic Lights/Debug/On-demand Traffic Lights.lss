
On-demand Traffic Lights.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000a8e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000b02  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000007  00800060  00800060  00000b02  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000b02  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000b34  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000118  00000000  00000000  00000b70  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000012d2  00000000  00000000  00000c88  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000872  00000000  00000000  00001f5a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a0f  00000000  00000000  000027cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000214  00000000  00000000  000031dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000546  00000000  00000000  000033f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000088e  00000000  00000000  00003936  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b8  00000000  00000000  000041c4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 64 01 	jmp	0x2c8	; 0x2c8 <__vector_1>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a7 36       	cpi	r26, 0x67	; 103
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 16 02 	call	0x42c	; 0x42c <main>
  74:	0c 94 45 05 	jmp	0xa8a	; 0xa8a <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <APP_init>:

void APP_init(void)
{
	//Initialize External Interrupt Button
	
	BUTTON_init(EXTERNAL_INT_BUTTON_PORT,EXTERNAL_INT_BUTTON_PIN);
  7c:	62 e0       	ldi	r22, 0x02	; 2
  7e:	84 e4       	ldi	r24, 0x44	; 68
  80:	0e 94 7d 01 	call	0x2fa	; 0x2fa <BUTTON_init>
	
	//Initialize CAR LEDS
	
	LED_init(LED_CG_PORT,LED_CG_PIN);
  84:	60 e0       	ldi	r22, 0x00	; 0
  86:	81 e4       	ldi	r24, 0x41	; 65
  88:	0e 94 81 01 	call	0x302	; 0x302 <LED_init>
	LED_init(LED_CY_PORT,LED_CY_PIN);
  8c:	61 e0       	ldi	r22, 0x01	; 1
  8e:	81 e4       	ldi	r24, 0x41	; 65
  90:	0e 94 81 01 	call	0x302	; 0x302 <LED_init>
	LED_init(LED_CR_PORT,LED_CR_PIN);
  94:	62 e0       	ldi	r22, 0x02	; 2
  96:	81 e4       	ldi	r24, 0x41	; 65
  98:	0e 94 81 01 	call	0x302	; 0x302 <LED_init>
	
	//Initialize PEDESTRIAN LEDS
	
	LED_init(LED_PG_PORT,LED_PG_PIN);
  9c:	60 e0       	ldi	r22, 0x00	; 0
  9e:	82 e4       	ldi	r24, 0x42	; 66
  a0:	0e 94 81 01 	call	0x302	; 0x302 <LED_init>
	LED_init(LED_PY_PORT,LED_PY_PIN);
  a4:	61 e0       	ldi	r22, 0x01	; 1
  a6:	82 e4       	ldi	r24, 0x42	; 66
  a8:	0e 94 81 01 	call	0x302	; 0x302 <LED_init>
	LED_init(LED_PR_PORT,LED_PR_PIN);
  ac:	62 e0       	ldi	r22, 0x02	; 2
  ae:	82 e4       	ldi	r24, 0x42	; 66
  b0:	0e 94 81 01 	call	0x302	; 0x302 <LED_init>
	
	//Initialize Timer
	
	timer_init();
  b4:	0e 94 11 03 	call	0x622	; 0x622 <timer_init>
	
	//Initialize External Interrupt
	/*Enable Global Interrupt*/
	
	sei();
  b8:	78 94       	sei
	
	/*Set INT0 to sense Rising Edge*/
	
	MCUCR|=(1<<0)|(1<<1);
  ba:	85 b7       	in	r24, 0x35	; 53
  bc:	83 60       	ori	r24, 0x03	; 3
  be:	85 bf       	out	0x35, r24	; 53
	
	/* Enable External Interrupt 0 - INT0*/
	
	GICR|=(1<<6);
  c0:	8b b7       	in	r24, 0x3b	; 59
  c2:	80 64       	ori	r24, 0x40	; 64
  c4:	8b bf       	out	0x3b, r24	; 59
  c6:	08 95       	ret

000000c8 <APP_start>:

void APP_start(void)
{
	while(1)
	{
		switch(mode)
  c8:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <mode>
  cc:	88 23       	and	r24, r24
  ce:	21 f0       	breq	.+8      	; 0xd8 <APP_start+0x10>
  d0:	81 30       	cpi	r24, 0x01	; 1
  d2:	09 f4       	brne	.+2      	; 0xd6 <APP_start+0xe>
  d4:	54 c0       	rjmp	.+168    	; 0x17e <APP_start+0xb6>
  d6:	f8 cf       	rjmp	.-16     	; 0xc8 <APP_start>
		{
			case 0: //Normal Mode
			extintpress=0;
  d8:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
			extintblink=0;
  dc:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <extintblink>
			carGreen=1;
  e0:	81 e0       	ldi	r24, 0x01	; 1
  e2:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <carGreen>
			LED_on(LED_CG_PORT,LED_CG_PIN); //Turn on Car Green LED
  e6:	60 e0       	ldi	r22, 0x00	; 0
  e8:	81 e4       	ldi	r24, 0x41	; 65
  ea:	0e 94 85 01 	call	0x30a	; 0x30a <LED_on>
			timer0_delay_ms(5000);
  ee:	88 e8       	ldi	r24, 0x88	; 136
  f0:	93 e1       	ldi	r25, 0x13	; 19
  f2:	0e 94 14 03 	call	0x628	; 0x628 <timer0_delay_ms>
			LED_off(LED_CG_PORT,LED_CG_PIN); //Turn off Car Green LED
  f6:	60 e0       	ldi	r22, 0x00	; 0
  f8:	81 e4       	ldi	r24, 0x41	; 65
  fa:	0e 94 89 01 	call	0x312	; 0x312 <LED_off>
		if(mode==1)
  fe:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <mode>
 102:	81 30       	cpi	r24, 0x01	; 1
 104:	09 f3       	breq	.-62     	; 0xc8 <APP_start>
		break;	
			carGreen=0;
 106:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <carGreen>
			carYellow=1;
 10a:	81 e0       	ldi	r24, 0x01	; 1
 10c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <carYellow>
			LED_blinkCar_5s(LED_CY_PORT,LED_CY_PIN,5000,500); //Blink Car Yellow LED
 110:	24 ef       	ldi	r18, 0xF4	; 244
 112:	31 e0       	ldi	r19, 0x01	; 1
 114:	48 e8       	ldi	r20, 0x88	; 136
 116:	53 e1       	ldi	r21, 0x13	; 19
 118:	61 e0       	ldi	r22, 0x01	; 1
 11a:	81 e4       	ldi	r24, 0x41	; 65
 11c:	0e 94 8d 01 	call	0x31a	; 0x31a <LED_blinkCar_5s>
		if(mode==1)
 120:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <mode>
 124:	81 30       	cpi	r24, 0x01	; 1
 126:	81 f2       	breq	.-96     	; 0xc8 <APP_start>
		break;
			carYellow=0;
 128:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <carYellow>
			carRed=1;
 12c:	81 e0       	ldi	r24, 0x01	; 1
 12e:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <carRed>
			LED_on(LED_CR_PORT,LED_CR_PIN); //Turn on Car Red LED
 132:	62 e0       	ldi	r22, 0x02	; 2
 134:	81 e4       	ldi	r24, 0x41	; 65
 136:	0e 94 85 01 	call	0x30a	; 0x30a <LED_on>
			timer0_delay_ms(5000);
 13a:	88 e8       	ldi	r24, 0x88	; 136
 13c:	93 e1       	ldi	r25, 0x13	; 19
 13e:	0e 94 14 03 	call	0x628	; 0x628 <timer0_delay_ms>
		if(mode==1)
 142:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <mode>
 146:	81 30       	cpi	r24, 0x01	; 1
 148:	09 f4       	brne	.+2      	; 0x14c <APP_start+0x84>
 14a:	be cf       	rjmp	.-132    	; 0xc8 <APP_start>
		break;
			carRed=0;
 14c:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <carRed>
			LED_off(LED_CR_PORT,LED_CR_PIN); //Turn off Car Red LED
 150:	62 e0       	ldi	r22, 0x02	; 2
 152:	81 e4       	ldi	r24, 0x41	; 65
 154:	0e 94 89 01 	call	0x312	; 0x312 <LED_off>
			carYellow=1;
 158:	81 e0       	ldi	r24, 0x01	; 1
 15a:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <carYellow>
			LED_blinkCar_5s(LED_CY_PORT,LED_CY_PIN,5000,500); //Blink Car Yellow LED
 15e:	24 ef       	ldi	r18, 0xF4	; 244
 160:	31 e0       	ldi	r19, 0x01	; 1
 162:	48 e8       	ldi	r20, 0x88	; 136
 164:	53 e1       	ldi	r21, 0x13	; 19
 166:	61 e0       	ldi	r22, 0x01	; 1
 168:	81 e4       	ldi	r24, 0x41	; 65
 16a:	0e 94 8d 01 	call	0x31a	; 0x31a <LED_blinkCar_5s>
		if(mode==1)
 16e:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <mode>
 172:	81 30       	cpi	r24, 0x01	; 1
 174:	09 f4       	brne	.+2      	; 0x178 <APP_start+0xb0>
 176:	a8 cf       	rjmp	.-176    	; 0xc8 <APP_start>
		break;
		carYellow=0;
 178:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <carYellow>
		break;
 17c:	a5 cf       	rjmp	.-182    	; 0xc8 <APP_start>
			case 1: //Pedestrian Mode 
			/*1 if Car Green LED is on*/
			extinterrupt=0;
 17e:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <extinterrupt>
			if (carGreen==1)
 182:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <carGreen>
 186:	81 30       	cpi	r24, 0x01	; 1
 188:	09 f0       	breq	.+2      	; 0x18c <APP_start+0xc4>
 18a:	41 c0       	rjmp	.+130    	; 0x20e <APP_start+0x146>
			{
				LED_on(LED_CG_PORT,LED_CG_PIN); //Turn on Car Green LED
 18c:	60 e0       	ldi	r22, 0x00	; 0
 18e:	81 e4       	ldi	r24, 0x41	; 65
 190:	0e 94 85 01 	call	0x30a	; 0x30a <LED_on>
				LED_on(LED_PR_PORT,LED_PR_PIN); //Turn on Pedestrian Red LED
 194:	62 e0       	ldi	r22, 0x02	; 2
 196:	82 e4       	ldi	r24, 0x42	; 66
 198:	0e 94 85 01 	call	0x30a	; 0x30a <LED_on>
				timer0_delay_ms(5000);
 19c:	88 e8       	ldi	r24, 0x88	; 136
 19e:	93 e1       	ldi	r25, 0x13	; 19
 1a0:	0e 94 14 03 	call	0x628	; 0x628 <timer0_delay_ms>
				LED_off(LED_CG_PORT,LED_CG_PIN); //Turn on Car Green LED
 1a4:	60 e0       	ldi	r22, 0x00	; 0
 1a6:	81 e4       	ldi	r24, 0x41	; 65
 1a8:	0e 94 89 01 	call	0x312	; 0x312 <LED_off>
				LED_off(LED_PR_PORT,LED_PR_PIN); //Turn on Pedestrian Red LED				
 1ac:	62 e0       	ldi	r22, 0x02	; 2
 1ae:	82 e4       	ldi	r24, 0x42	; 66
 1b0:	0e 94 89 01 	call	0x312	; 0x312 <LED_off>
				LED_blinkYellow_5s(LED_CY_PORT,LED_CY_PIN,LED_PY_PORT,LED_PY_PIN,5000,500); //Blink Car and Pedestrian Yellow LED
 1b4:	0f 2e       	mov	r0, r31
 1b6:	f4 ef       	ldi	r31, 0xF4	; 244
 1b8:	ef 2e       	mov	r14, r31
 1ba:	ff 24       	eor	r15, r15
 1bc:	f3 94       	inc	r15
 1be:	f0 2d       	mov	r31, r0
 1c0:	08 e8       	ldi	r16, 0x88	; 136
 1c2:	13 e1       	ldi	r17, 0x13	; 19
 1c4:	21 e0       	ldi	r18, 0x01	; 1
 1c6:	42 e4       	ldi	r20, 0x42	; 66
 1c8:	61 e0       	ldi	r22, 0x01	; 1
 1ca:	81 e4       	ldi	r24, 0x41	; 65
 1cc:	0e 94 cf 01 	call	0x39e	; 0x39e <LED_blinkYellow_5s>
				LED_on(LED_CR_PORT,LED_CR_PIN); //Turn on Car Red LED
 1d0:	62 e0       	ldi	r22, 0x02	; 2
 1d2:	81 e4       	ldi	r24, 0x41	; 65
 1d4:	0e 94 85 01 	call	0x30a	; 0x30a <LED_on>
				LED_on(LED_PG_PORT,LED_PG_PIN); //Turn on Pedestrian Green LED
 1d8:	60 e0       	ldi	r22, 0x00	; 0
 1da:	82 e4       	ldi	r24, 0x42	; 66
 1dc:	0e 94 85 01 	call	0x30a	; 0x30a <LED_on>
				timer0_delay_ms(5000);
 1e0:	88 e8       	ldi	r24, 0x88	; 136
 1e2:	93 e1       	ldi	r25, 0x13	; 19
 1e4:	0e 94 14 03 	call	0x628	; 0x628 <timer0_delay_ms>
				LED_off(LED_CR_PORT,LED_CR_PIN);//Turn off Car Red LED
 1e8:	62 e0       	ldi	r22, 0x02	; 2
 1ea:	81 e4       	ldi	r24, 0x41	; 65
 1ec:	0e 94 89 01 	call	0x312	; 0x312 <LED_off>
				LED_off(LED_PG_PORT,LED_PG_PIN);//Turn off Pedestrian Green LED
 1f0:	60 e0       	ldi	r22, 0x00	; 0
 1f2:	82 e4       	ldi	r24, 0x42	; 66
 1f4:	0e 94 89 01 	call	0x312	; 0x312 <LED_off>
				LED_blinkYellow_5s(LED_CY_PORT,LED_CY_PIN,LED_PY_PORT,LED_PY_PIN,5000,500); //Blink Car and Pedestrian Yellow LED
 1f8:	21 e0       	ldi	r18, 0x01	; 1
 1fa:	42 e4       	ldi	r20, 0x42	; 66
 1fc:	61 e0       	ldi	r22, 0x01	; 1
 1fe:	81 e4       	ldi	r24, 0x41	; 65
 200:	0e 94 cf 01 	call	0x39e	; 0x39e <LED_blinkYellow_5s>
				carGreen=0;
 204:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <carGreen>
				mode=0;
 208:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <mode>
 20c:	5d cf       	rjmp	.-326    	; 0xc8 <APP_start>
			}
			/*if Car Yellow LED is on*/
			else if (carYellow==1)
 20e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <carYellow>
 212:	81 30       	cpi	r24, 0x01	; 1
 214:	69 f5       	brne	.+90     	; 0x270 <APP_start+0x1a8>
			{
				LED_blinkYellow_5s(LED_CY_PORT,LED_CY_PIN,LED_PY_PORT,LED_PY_PIN,5000,500); //Blink Car and Pedestrian Yellow LED
 216:	0f 2e       	mov	r0, r31
 218:	f4 ef       	ldi	r31, 0xF4	; 244
 21a:	ef 2e       	mov	r14, r31
 21c:	ff 24       	eor	r15, r15
 21e:	f3 94       	inc	r15
 220:	f0 2d       	mov	r31, r0
 222:	08 e8       	ldi	r16, 0x88	; 136
 224:	13 e1       	ldi	r17, 0x13	; 19
 226:	21 e0       	ldi	r18, 0x01	; 1
 228:	42 e4       	ldi	r20, 0x42	; 66
 22a:	61 e0       	ldi	r22, 0x01	; 1
 22c:	81 e4       	ldi	r24, 0x41	; 65
 22e:	0e 94 cf 01 	call	0x39e	; 0x39e <LED_blinkYellow_5s>
				LED_on(LED_CR_PORT,LED_CR_PIN); //Turn on Car Red LED
 232:	62 e0       	ldi	r22, 0x02	; 2
 234:	81 e4       	ldi	r24, 0x41	; 65
 236:	0e 94 85 01 	call	0x30a	; 0x30a <LED_on>
				LED_on(LED_PG_PORT,LED_PG_PIN); //Turn on Pedestrian Green LED
 23a:	60 e0       	ldi	r22, 0x00	; 0
 23c:	82 e4       	ldi	r24, 0x42	; 66
 23e:	0e 94 85 01 	call	0x30a	; 0x30a <LED_on>
				timer0_delay_ms(5000);
 242:	88 e8       	ldi	r24, 0x88	; 136
 244:	93 e1       	ldi	r25, 0x13	; 19
 246:	0e 94 14 03 	call	0x628	; 0x628 <timer0_delay_ms>
				LED_off(LED_CR_PORT,LED_CR_PIN); //Turn off Car Red LED
 24a:	62 e0       	ldi	r22, 0x02	; 2
 24c:	81 e4       	ldi	r24, 0x41	; 65
 24e:	0e 94 89 01 	call	0x312	; 0x312 <LED_off>
				LED_off(LED_PG_PORT,LED_PG_PIN); //Turn off Pedestrian Green LED
 252:	60 e0       	ldi	r22, 0x00	; 0
 254:	82 e4       	ldi	r24, 0x42	; 66
 256:	0e 94 89 01 	call	0x312	; 0x312 <LED_off>
				LED_blinkYellow_5s(LED_CY_PORT,LED_CY_PIN,LED_PY_PORT,LED_PY_PIN,5000,500);
 25a:	21 e0       	ldi	r18, 0x01	; 1
 25c:	42 e4       	ldi	r20, 0x42	; 66
 25e:	61 e0       	ldi	r22, 0x01	; 1
 260:	81 e4       	ldi	r24, 0x41	; 65
 262:	0e 94 cf 01 	call	0x39e	; 0x39e <LED_blinkYellow_5s>
				carYellow=0;
 266:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <carYellow>
				mode=0;
 26a:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <mode>
 26e:	2c cf       	rjmp	.-424    	; 0xc8 <APP_start>
			}
			else if (carRed==1)
 270:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <carRed>
 274:	81 30       	cpi	r24, 0x01	; 1
 276:	09 f0       	breq	.+2      	; 0x27a <APP_start+0x1b2>
 278:	27 cf       	rjmp	.-434    	; 0xc8 <APP_start>
			{
				LED_on(LED_CR_PORT,LED_CR_PIN);//Turn on Car Red LED
 27a:	62 e0       	ldi	r22, 0x02	; 2
 27c:	81 e4       	ldi	r24, 0x41	; 65
 27e:	0e 94 85 01 	call	0x30a	; 0x30a <LED_on>
				LED_on(LED_PG_PORT,LED_PG_PIN); //Turn on Pedestrian Green LED
 282:	60 e0       	ldi	r22, 0x00	; 0
 284:	82 e4       	ldi	r24, 0x42	; 66
 286:	0e 94 85 01 	call	0x30a	; 0x30a <LED_on>
				timer0_delay_ms(5000);
 28a:	88 e8       	ldi	r24, 0x88	; 136
 28c:	93 e1       	ldi	r25, 0x13	; 19
 28e:	0e 94 14 03 	call	0x628	; 0x628 <timer0_delay_ms>
				LED_off(LED_CR_PORT,LED_CR_PIN);//Turn off Car Red LED
 292:	62 e0       	ldi	r22, 0x02	; 2
 294:	81 e4       	ldi	r24, 0x41	; 65
 296:	0e 94 89 01 	call	0x312	; 0x312 <LED_off>
				LED_off(LED_PG_PORT,LED_PG_PIN); //Turn off Pedestrian Green LED
 29a:	60 e0       	ldi	r22, 0x00	; 0
 29c:	82 e4       	ldi	r24, 0x42	; 66
 29e:	0e 94 89 01 	call	0x312	; 0x312 <LED_off>
				LED_blinkYellow_5s(LED_CY_PORT,LED_CY_PIN,LED_PY_PORT,LED_PY_PIN,5000,500); //Blink Car and Pedestrian Yellow LED
 2a2:	0f 2e       	mov	r0, r31
 2a4:	f4 ef       	ldi	r31, 0xF4	; 244
 2a6:	ef 2e       	mov	r14, r31
 2a8:	ff 24       	eor	r15, r15
 2aa:	f3 94       	inc	r15
 2ac:	f0 2d       	mov	r31, r0
 2ae:	08 e8       	ldi	r16, 0x88	; 136
 2b0:	13 e1       	ldi	r17, 0x13	; 19
 2b2:	21 e0       	ldi	r18, 0x01	; 1
 2b4:	42 e4       	ldi	r20, 0x42	; 66
 2b6:	61 e0       	ldi	r22, 0x01	; 1
 2b8:	81 e4       	ldi	r24, 0x41	; 65
 2ba:	0e 94 cf 01 	call	0x39e	; 0x39e <LED_blinkYellow_5s>
				carRed=0;
 2be:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <carRed>
				mode=0;
 2c2:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <mode>
 2c6:	00 cf       	rjmp	.-512    	; 0xc8 <APP_start>

000002c8 <__vector_1>:
		}
	}
}

ISR(EXT_INT_0)
{
 2c8:	1f 92       	push	r1
 2ca:	0f 92       	push	r0
 2cc:	0f b6       	in	r0, 0x3f	; 63
 2ce:	0f 92       	push	r0
 2d0:	11 24       	eor	r1, r1
 2d2:	8f 93       	push	r24
	if (extintpress==0)
 2d4:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 2d8:	81 11       	cpse	r24, r1
 2da:	09 c0       	rjmp	.+18     	; 0x2ee <__vector_1+0x26>
	{	
		extinterrupt=1;//Flag used to stop timer
 2dc:	81 e0       	ldi	r24, 0x01	; 1
 2de:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <extinterrupt>
		mode=1;//Flag to go to pedestrian mode
 2e2:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <mode>
		extintpress=1;//Flag used to accept only one press until the code goes back to normal mode
 2e6:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
		extintblink=1;//Flag used to stop blinking Car Yellow in normal mode
 2ea:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <extintblink>
	else
	{
		
	}

}
 2ee:	8f 91       	pop	r24
 2f0:	0f 90       	pop	r0
 2f2:	0f be       	out	0x3f, r0	; 63
 2f4:	0f 90       	pop	r0
 2f6:	1f 90       	pop	r1
 2f8:	18 95       	reti

000002fa <BUTTON_init>:


//Initialize
void BUTTON_init(uint8_t buttonPort,uint8_t buttonPin)
{
	DIO_init(buttonPort,buttonPin,IN);
 2fa:	40 e0       	ldi	r20, 0x00	; 0
 2fc:	0e 94 1d 02 	call	0x43a	; 0x43a <DIO_init>
 300:	08 95       	ret

00000302 <LED_init>:
{
	DIO_write(ledPort,ledPin,LOW);
}
void LED_toggle(uint8_t ledPort, uint8_t ledPin)
{
	DIO_toggle(ledPort,ledPin);
 302:	41 e0       	ldi	r20, 0x01	; 1
 304:	0e 94 1d 02 	call	0x43a	; 0x43a <DIO_init>
 308:	08 95       	ret

0000030a <LED_on>:
 30a:	41 e0       	ldi	r20, 0x01	; 1
 30c:	0e 94 97 02 	call	0x52e	; 0x52e <DIO_write>
 310:	08 95       	ret

00000312 <LED_off>:
 312:	40 e0       	ldi	r20, 0x00	; 0
 314:	0e 94 97 02 	call	0x52e	; 0x52e <DIO_write>
 318:	08 95       	ret

0000031a <LED_blinkCar_5s>:
}

//Function that makes Car LED blink for the amount of delay given
void LED_blinkCar_5s(uint8_t ledPort, uint8_t ledPin,uint16_t delay,uint16_t blinkfrequency) 
{
 31a:	cf 92       	push	r12
 31c:	df 92       	push	r13
 31e:	ff 92       	push	r15
 320:	0f 93       	push	r16
 322:	1f 93       	push	r17
 324:	cf 93       	push	r28
 326:	df 93       	push	r29
 328:	f8 2e       	mov	r15, r24
 32a:	d6 2f       	mov	r29, r22
 32c:	89 01       	movw	r16, r18
	uint8_t i=0;
	uint16_t blink_counter=delay/1000;
 32e:	9a 01       	movw	r18, r20
 330:	36 95       	lsr	r19
 332:	27 95       	ror	r18
 334:	36 95       	lsr	r19
 336:	27 95       	ror	r18
 338:	36 95       	lsr	r19
 33a:	27 95       	ror	r18
 33c:	a5 ec       	ldi	r26, 0xC5	; 197
 33e:	b0 e2       	ldi	r27, 0x20	; 32
 340:	0e 94 36 05 	call	0xa6c	; 0xa6c <__umulhisi3>
 344:	6c 01       	movw	r12, r24
 346:	d6 94       	lsr	r13
 348:	c7 94       	ror	r12
 34a:	d6 94       	lsr	r13
 34c:	c7 94       	ror	r12
 34e:	d6 94       	lsr	r13
 350:	c7 94       	ror	r12
 352:	d6 94       	lsr	r13
 354:	c7 94       	ror	r12
}

//Function that makes Car LED blink for the amount of delay given
void LED_blinkCar_5s(uint8_t ledPort, uint8_t ledPin,uint16_t delay,uint16_t blinkfrequency) 
{
	uint8_t i=0;
 356:	c0 e0       	ldi	r28, 0x00	; 0
	uint16_t blink_counter=delay/1000;
	while(i<blink_counter && extintblink==0)
 358:	0f c0       	rjmp	.+30     	; 0x378 <LED_blinkCar_5s+0x5e>
	{
		LED_on(ledPort,ledPin);
 35a:	6d 2f       	mov	r22, r29
 35c:	8f 2d       	mov	r24, r15
 35e:	0e 94 85 01 	call	0x30a	; 0x30a <LED_on>
		timer0_delay_ms(blinkfrequency); // To get half the amount of delay
 362:	c8 01       	movw	r24, r16
 364:	0e 94 14 03 	call	0x628	; 0x628 <timer0_delay_ms>
		LED_off(ledPort,ledPin);
 368:	6d 2f       	mov	r22, r29
 36a:	8f 2d       	mov	r24, r15
 36c:	0e 94 89 01 	call	0x312	; 0x312 <LED_off>
		timer0_delay_ms(blinkfrequency);
 370:	c8 01       	movw	r24, r16
 372:	0e 94 14 03 	call	0x628	; 0x628 <timer0_delay_ms>
		i++;
 376:	cf 5f       	subi	r28, 0xFF	; 255
//Function that makes Car LED blink for the amount of delay given
void LED_blinkCar_5s(uint8_t ledPort, uint8_t ledPin,uint16_t delay,uint16_t blinkfrequency) 
{
	uint8_t i=0;
	uint16_t blink_counter=delay/1000;
	while(i<blink_counter && extintblink==0)
 378:	8c 2f       	mov	r24, r28
 37a:	90 e0       	ldi	r25, 0x00	; 0
 37c:	8c 15       	cp	r24, r12
 37e:	9d 05       	cpc	r25, r13
 380:	20 f4       	brcc	.+8      	; 0x38a <LED_blinkCar_5s+0x70>
 382:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <extintblink>
 386:	88 23       	and	r24, r24
 388:	41 f3       	breq	.-48     	; 0x35a <LED_blinkCar_5s+0x40>
		timer0_delay_ms(blinkfrequency); // To get half the amount of delay
		LED_off(ledPort,ledPin);
		timer0_delay_ms(blinkfrequency);
		i++;
	}	
	extintblink=0;
 38a:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <extintblink>
	
	
}
 38e:	df 91       	pop	r29
 390:	cf 91       	pop	r28
 392:	1f 91       	pop	r17
 394:	0f 91       	pop	r16
 396:	ff 90       	pop	r15
 398:	df 90       	pop	r13
 39a:	cf 90       	pop	r12
 39c:	08 95       	ret

0000039e <LED_blinkYellow_5s>:

//Function that makes Car and Pedestrian LED blink for the amount of delay given and the blinkfrequency in seconds
void LED_blinkYellow_5s(uint8_t ledPort0, uint8_t ledPin0,uint8_t ledPort1, uint8_t ledPin1,uint16_t delay,uint16_t blinkfrequency) 
{
 39e:	bf 92       	push	r11
 3a0:	cf 92       	push	r12
 3a2:	df 92       	push	r13
 3a4:	ef 92       	push	r14
 3a6:	ff 92       	push	r15
 3a8:	0f 93       	push	r16
 3aa:	1f 93       	push	r17
 3ac:	cf 93       	push	r28
 3ae:	df 93       	push	r29
 3b0:	b8 2e       	mov	r11, r24
 3b2:	c6 2e       	mov	r12, r22
 3b4:	d4 2e       	mov	r13, r20
 3b6:	d2 2f       	mov	r29, r18
	uint8_t i=0;
	uint16_t blink_counter=delay/1000;
 3b8:	98 01       	movw	r18, r16
 3ba:	36 95       	lsr	r19
 3bc:	27 95       	ror	r18
 3be:	36 95       	lsr	r19
 3c0:	27 95       	ror	r18
 3c2:	36 95       	lsr	r19
 3c4:	27 95       	ror	r18
 3c6:	a5 ec       	ldi	r26, 0xC5	; 197
 3c8:	b0 e2       	ldi	r27, 0x20	; 32
 3ca:	0e 94 36 05 	call	0xa6c	; 0xa6c <__umulhisi3>
 3ce:	8c 01       	movw	r16, r24
 3d0:	12 95       	swap	r17
 3d2:	02 95       	swap	r16
 3d4:	0f 70       	andi	r16, 0x0F	; 15
 3d6:	01 27       	eor	r16, r17
 3d8:	1f 70       	andi	r17, 0x0F	; 15
 3da:	01 27       	eor	r16, r17
}

//Function that makes Car and Pedestrian LED blink for the amount of delay given and the blinkfrequency in seconds
void LED_blinkYellow_5s(uint8_t ledPort0, uint8_t ledPin0,uint8_t ledPort1, uint8_t ledPin1,uint16_t delay,uint16_t blinkfrequency) 
{
	uint8_t i=0;
 3dc:	c0 e0       	ldi	r28, 0x00	; 0
	uint16_t blink_counter=delay/1000;
	while(i<blink_counter)
 3de:	17 c0       	rjmp	.+46     	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
	{
		LED_on(ledPort0,ledPin0);
 3e0:	6c 2d       	mov	r22, r12
 3e2:	8b 2d       	mov	r24, r11
 3e4:	0e 94 85 01 	call	0x30a	; 0x30a <LED_on>
		LED_on(ledPort1,ledPin1);
 3e8:	6d 2f       	mov	r22, r29
 3ea:	8d 2d       	mov	r24, r13
 3ec:	0e 94 85 01 	call	0x30a	; 0x30a <LED_on>
		timer0_delay_ms(blinkfrequency); // To get half the amount of delay
 3f0:	c7 01       	movw	r24, r14
 3f2:	0e 94 14 03 	call	0x628	; 0x628 <timer0_delay_ms>
		LED_off(ledPort0,ledPin0);
 3f6:	6c 2d       	mov	r22, r12
 3f8:	8b 2d       	mov	r24, r11
 3fa:	0e 94 89 01 	call	0x312	; 0x312 <LED_off>
		LED_off(ledPort1,ledPin1);
 3fe:	6d 2f       	mov	r22, r29
 400:	8d 2d       	mov	r24, r13
 402:	0e 94 89 01 	call	0x312	; 0x312 <LED_off>
		timer0_delay_ms(blinkfrequency);
 406:	c7 01       	movw	r24, r14
 408:	0e 94 14 03 	call	0x628	; 0x628 <timer0_delay_ms>
		i++;
 40c:	cf 5f       	subi	r28, 0xFF	; 255
//Function that makes Car and Pedestrian LED blink for the amount of delay given and the blinkfrequency in seconds
void LED_blinkYellow_5s(uint8_t ledPort0, uint8_t ledPin0,uint8_t ledPort1, uint8_t ledPin1,uint16_t delay,uint16_t blinkfrequency) 
{
	uint8_t i=0;
	uint16_t blink_counter=delay/1000;
	while(i<blink_counter)
 40e:	8c 2f       	mov	r24, r28
 410:	90 e0       	ldi	r25, 0x00	; 0
 412:	80 17       	cp	r24, r16
 414:	91 07       	cpc	r25, r17
 416:	20 f3       	brcs	.-56     	; 0x3e0 <LED_blinkYellow_5s+0x42>
		LED_off(ledPort1,ledPin1);
		timer0_delay_ms(blinkfrequency);
		i++;
		
	}
 418:	df 91       	pop	r29
 41a:	cf 91       	pop	r28
 41c:	1f 91       	pop	r17
 41e:	0f 91       	pop	r16
 420:	ff 90       	pop	r15
 422:	ef 90       	pop	r14
 424:	df 90       	pop	r13
 426:	cf 90       	pop	r12
 428:	bf 90       	pop	r11
 42a:	08 95       	ret

0000042c <main>:
#include "Application/application.h"


int main(void)
{
	APP_init();
 42c:	0e 94 3e 00 	call	0x7c	; 0x7c <APP_init>
	APP_start();
 430:	0e 94 64 00 	call	0xc8	; 0xc8 <APP_start>
}
 434:	80 e0       	ldi	r24, 0x00	; 0
 436:	90 e0       	ldi	r25, 0x00	; 0
 438:	08 95       	ret

0000043a <DIO_init>:
#include "dio.h"
//global variables
//function definitions
void DIO_init(uint8_t portNumber, uint8_t pinNumber, uint8_t direction)
{
	switch(portNumber)
 43a:	82 34       	cpi	r24, 0x42	; 66
 43c:	31 f1       	breq	.+76     	; 0x48a <DIO_init+0x50>
 43e:	18 f4       	brcc	.+6      	; 0x446 <DIO_init+0xc>
 440:	81 34       	cpi	r24, 0x41	; 65
 442:	39 f0       	breq	.+14     	; 0x452 <DIO_init+0x18>
 444:	08 95       	ret
 446:	83 34       	cpi	r24, 0x43	; 67
 448:	e1 f1       	breq	.+120    	; 0x4c2 <DIO_init+0x88>
 44a:	84 34       	cpi	r24, 0x44	; 68
 44c:	09 f4       	brne	.+2      	; 0x450 <DIO_init+0x16>
 44e:	54 c0       	rjmp	.+168    	; 0x4f8 <DIO_init+0xbe>
 450:	08 95       	ret
	{
		case PORT_A:
			if (direction==IN)
 452:	41 11       	cpse	r20, r1
 454:	0c c0       	rjmp	.+24     	; 0x46e <DIO_init+0x34>
			{
				//DDRA &=~(1<<pinNumber);
				CLEAR_BIT(DDRA,pinNumber);//Input
 456:	2a b3       	in	r18, 0x1a	; 26
 458:	81 e0       	ldi	r24, 0x01	; 1
 45a:	90 e0       	ldi	r25, 0x00	; 0
 45c:	02 c0       	rjmp	.+4      	; 0x462 <DIO_init+0x28>
 45e:	88 0f       	add	r24, r24
 460:	99 1f       	adc	r25, r25
 462:	6a 95       	dec	r22
 464:	e2 f7       	brpl	.-8      	; 0x45e <DIO_init+0x24>
 466:	80 95       	com	r24
 468:	82 23       	and	r24, r18
 46a:	8a bb       	out	0x1a, r24	; 26
 46c:	08 95       	ret
			}
			else if (direction==OUT)
 46e:	41 30       	cpi	r20, 0x01	; 1
 470:	09 f0       	breq	.+2      	; 0x474 <DIO_init+0x3a>
 472:	5c c0       	rjmp	.+184    	; 0x52c <DIO_init+0xf2>
			{
				//DDRA |=(1<<pinNumber);
				SET_BIT(DDRA,pinNumber);//Output
 474:	2a b3       	in	r18, 0x1a	; 26
 476:	81 e0       	ldi	r24, 0x01	; 1
 478:	90 e0       	ldi	r25, 0x00	; 0
 47a:	02 c0       	rjmp	.+4      	; 0x480 <DIO_init+0x46>
 47c:	88 0f       	add	r24, r24
 47e:	99 1f       	adc	r25, r25
 480:	6a 95       	dec	r22
 482:	e2 f7       	brpl	.-8      	; 0x47c <DIO_init+0x42>
 484:	82 2b       	or	r24, r18
 486:	8a bb       	out	0x1a, r24	; 26
 488:	08 95       	ret
			{
				//Error handling
			}
		break;
		case PORT_B:
			if (direction==IN)
 48a:	41 11       	cpse	r20, r1
 48c:	0c c0       	rjmp	.+24     	; 0x4a6 <DIO_init+0x6c>
			{
				CLEAR_BIT(DDRB,pinNumber);//Input
 48e:	27 b3       	in	r18, 0x17	; 23
 490:	81 e0       	ldi	r24, 0x01	; 1
 492:	90 e0       	ldi	r25, 0x00	; 0
 494:	02 c0       	rjmp	.+4      	; 0x49a <DIO_init+0x60>
 496:	88 0f       	add	r24, r24
 498:	99 1f       	adc	r25, r25
 49a:	6a 95       	dec	r22
 49c:	e2 f7       	brpl	.-8      	; 0x496 <DIO_init+0x5c>
 49e:	80 95       	com	r24
 4a0:	82 23       	and	r24, r18
 4a2:	87 bb       	out	0x17, r24	; 23
 4a4:	08 95       	ret
			}
			else if (direction==OUT)
 4a6:	41 30       	cpi	r20, 0x01	; 1
 4a8:	09 f0       	breq	.+2      	; 0x4ac <DIO_init+0x72>
 4aa:	40 c0       	rjmp	.+128    	; 0x52c <DIO_init+0xf2>
			{
				SET_BIT(DDRB,pinNumber);//Output
 4ac:	27 b3       	in	r18, 0x17	; 23
 4ae:	81 e0       	ldi	r24, 0x01	; 1
 4b0:	90 e0       	ldi	r25, 0x00	; 0
 4b2:	02 c0       	rjmp	.+4      	; 0x4b8 <DIO_init+0x7e>
 4b4:	88 0f       	add	r24, r24
 4b6:	99 1f       	adc	r25, r25
 4b8:	6a 95       	dec	r22
 4ba:	e2 f7       	brpl	.-8      	; 0x4b4 <DIO_init+0x7a>
 4bc:	82 2b       	or	r24, r18
 4be:	87 bb       	out	0x17, r24	; 23
 4c0:	08 95       	ret
			{
				//Error handling
			}
		break;
		case PORT_C:
			if (direction==IN)
 4c2:	41 11       	cpse	r20, r1
 4c4:	0c c0       	rjmp	.+24     	; 0x4de <DIO_init+0xa4>
			{
				CLEAR_BIT(DDRC,pinNumber);//Input
 4c6:	24 b3       	in	r18, 0x14	; 20
 4c8:	81 e0       	ldi	r24, 0x01	; 1
 4ca:	90 e0       	ldi	r25, 0x00	; 0
 4cc:	02 c0       	rjmp	.+4      	; 0x4d2 <DIO_init+0x98>
 4ce:	88 0f       	add	r24, r24
 4d0:	99 1f       	adc	r25, r25
 4d2:	6a 95       	dec	r22
 4d4:	e2 f7       	brpl	.-8      	; 0x4ce <DIO_init+0x94>
 4d6:	80 95       	com	r24
 4d8:	82 23       	and	r24, r18
 4da:	84 bb       	out	0x14, r24	; 20
 4dc:	08 95       	ret
			}
			else if (direction==OUT)
 4de:	41 30       	cpi	r20, 0x01	; 1
 4e0:	29 f5       	brne	.+74     	; 0x52c <DIO_init+0xf2>
			{
				SET_BIT(DDRC,pinNumber);//Output
 4e2:	24 b3       	in	r18, 0x14	; 20
 4e4:	81 e0       	ldi	r24, 0x01	; 1
 4e6:	90 e0       	ldi	r25, 0x00	; 0
 4e8:	02 c0       	rjmp	.+4      	; 0x4ee <DIO_init+0xb4>
 4ea:	88 0f       	add	r24, r24
 4ec:	99 1f       	adc	r25, r25
 4ee:	6a 95       	dec	r22
 4f0:	e2 f7       	brpl	.-8      	; 0x4ea <DIO_init+0xb0>
 4f2:	82 2b       	or	r24, r18
 4f4:	84 bb       	out	0x14, r24	; 20
 4f6:	08 95       	ret
			{
				//Error handling
			}
		break;
		case PORT_D:
			if (direction==IN)
 4f8:	41 11       	cpse	r20, r1
 4fa:	0c c0       	rjmp	.+24     	; 0x514 <DIO_init+0xda>
			{
				CLEAR_BIT(DDRD,pinNumber);//Input
 4fc:	21 b3       	in	r18, 0x11	; 17
 4fe:	81 e0       	ldi	r24, 0x01	; 1
 500:	90 e0       	ldi	r25, 0x00	; 0
 502:	02 c0       	rjmp	.+4      	; 0x508 <DIO_init+0xce>
 504:	88 0f       	add	r24, r24
 506:	99 1f       	adc	r25, r25
 508:	6a 95       	dec	r22
 50a:	e2 f7       	brpl	.-8      	; 0x504 <DIO_init+0xca>
 50c:	80 95       	com	r24
 50e:	82 23       	and	r24, r18
 510:	81 bb       	out	0x11, r24	; 17
 512:	08 95       	ret
			}
			else if (direction==OUT)
 514:	41 30       	cpi	r20, 0x01	; 1
 516:	51 f4       	brne	.+20     	; 0x52c <DIO_init+0xf2>
			{
				SET_BIT(DDRD,pinNumber); //Output
 518:	21 b3       	in	r18, 0x11	; 17
 51a:	81 e0       	ldi	r24, 0x01	; 1
 51c:	90 e0       	ldi	r25, 0x00	; 0
 51e:	02 c0       	rjmp	.+4      	; 0x524 <DIO_init+0xea>
 520:	88 0f       	add	r24, r24
 522:	99 1f       	adc	r25, r25
 524:	6a 95       	dec	r22
 526:	e2 f7       	brpl	.-8      	; 0x520 <DIO_init+0xe6>
 528:	82 2b       	or	r24, r18
 52a:	81 bb       	out	0x11, r24	; 17
 52c:	08 95       	ret

0000052e <DIO_write>:
	}
}

void DIO_write(uint8_t portNumber, uint8_t pinNumber, uint8_t value)
{
	switch(portNumber)
 52e:	82 34       	cpi	r24, 0x42	; 66
 530:	31 f1       	breq	.+76     	; 0x57e <DIO_write+0x50>
 532:	18 f4       	brcc	.+6      	; 0x53a <DIO_write+0xc>
 534:	81 34       	cpi	r24, 0x41	; 65
 536:	39 f0       	breq	.+14     	; 0x546 <DIO_write+0x18>
 538:	08 95       	ret
 53a:	83 34       	cpi	r24, 0x43	; 67
 53c:	e1 f1       	breq	.+120    	; 0x5b6 <DIO_write+0x88>
 53e:	84 34       	cpi	r24, 0x44	; 68
 540:	09 f4       	brne	.+2      	; 0x544 <DIO_write+0x16>
 542:	54 c0       	rjmp	.+168    	; 0x5ec <DIO_write+0xbe>
 544:	08 95       	ret
	{
		case PORT_A:
		if (value==LOW)
 546:	41 11       	cpse	r20, r1
 548:	0c c0       	rjmp	.+24     	; 0x562 <DIO_write+0x34>
		{
			CLEAR_BIT(PORTA,pinNumber);//write 0
 54a:	2b b3       	in	r18, 0x1b	; 27
 54c:	81 e0       	ldi	r24, 0x01	; 1
 54e:	90 e0       	ldi	r25, 0x00	; 0
 550:	02 c0       	rjmp	.+4      	; 0x556 <DIO_write+0x28>
 552:	88 0f       	add	r24, r24
 554:	99 1f       	adc	r25, r25
 556:	6a 95       	dec	r22
 558:	e2 f7       	brpl	.-8      	; 0x552 <DIO_write+0x24>
 55a:	80 95       	com	r24
 55c:	82 23       	and	r24, r18
 55e:	8b bb       	out	0x1b, r24	; 27
 560:	08 95       	ret
		}
		else if (value==HIGH)
 562:	41 30       	cpi	r20, 0x01	; 1
 564:	09 f0       	breq	.+2      	; 0x568 <DIO_write+0x3a>
 566:	5c c0       	rjmp	.+184    	; 0x620 <DIO_write+0xf2>
		{
			SET_BIT(PORTA,pinNumber);//write 1
 568:	2b b3       	in	r18, 0x1b	; 27
 56a:	81 e0       	ldi	r24, 0x01	; 1
 56c:	90 e0       	ldi	r25, 0x00	; 0
 56e:	02 c0       	rjmp	.+4      	; 0x574 <DIO_write+0x46>
 570:	88 0f       	add	r24, r24
 572:	99 1f       	adc	r25, r25
 574:	6a 95       	dec	r22
 576:	e2 f7       	brpl	.-8      	; 0x570 <DIO_write+0x42>
 578:	82 2b       	or	r24, r18
 57a:	8b bb       	out	0x1b, r24	; 27
 57c:	08 95       	ret
		{
			//Error handling
		}
		break;
		case PORT_B:
		if (value==LOW)
 57e:	41 11       	cpse	r20, r1
 580:	0c c0       	rjmp	.+24     	; 0x59a <DIO_write+0x6c>
		{
			CLEAR_BIT(PORTB,pinNumber);//write 0
 582:	28 b3       	in	r18, 0x18	; 24
 584:	81 e0       	ldi	r24, 0x01	; 1
 586:	90 e0       	ldi	r25, 0x00	; 0
 588:	02 c0       	rjmp	.+4      	; 0x58e <DIO_write+0x60>
 58a:	88 0f       	add	r24, r24
 58c:	99 1f       	adc	r25, r25
 58e:	6a 95       	dec	r22
 590:	e2 f7       	brpl	.-8      	; 0x58a <DIO_write+0x5c>
 592:	80 95       	com	r24
 594:	82 23       	and	r24, r18
 596:	88 bb       	out	0x18, r24	; 24
 598:	08 95       	ret
		}
		else if (value==HIGH)
 59a:	41 30       	cpi	r20, 0x01	; 1
 59c:	09 f0       	breq	.+2      	; 0x5a0 <DIO_write+0x72>
 59e:	40 c0       	rjmp	.+128    	; 0x620 <DIO_write+0xf2>
		{
			SET_BIT(PORTB,pinNumber);//write 1
 5a0:	28 b3       	in	r18, 0x18	; 24
 5a2:	81 e0       	ldi	r24, 0x01	; 1
 5a4:	90 e0       	ldi	r25, 0x00	; 0
 5a6:	02 c0       	rjmp	.+4      	; 0x5ac <DIO_write+0x7e>
 5a8:	88 0f       	add	r24, r24
 5aa:	99 1f       	adc	r25, r25
 5ac:	6a 95       	dec	r22
 5ae:	e2 f7       	brpl	.-8      	; 0x5a8 <DIO_write+0x7a>
 5b0:	82 2b       	or	r24, r18
 5b2:	88 bb       	out	0x18, r24	; 24
 5b4:	08 95       	ret
		{
			//Error handling
		}
		break;
		case PORT_C:
		if (value==LOW)
 5b6:	41 11       	cpse	r20, r1
 5b8:	0c c0       	rjmp	.+24     	; 0x5d2 <DIO_write+0xa4>
		{
			CLEAR_BIT(PORTC,pinNumber);//write 0
 5ba:	25 b3       	in	r18, 0x15	; 21
 5bc:	81 e0       	ldi	r24, 0x01	; 1
 5be:	90 e0       	ldi	r25, 0x00	; 0
 5c0:	02 c0       	rjmp	.+4      	; 0x5c6 <DIO_write+0x98>
 5c2:	88 0f       	add	r24, r24
 5c4:	99 1f       	adc	r25, r25
 5c6:	6a 95       	dec	r22
 5c8:	e2 f7       	brpl	.-8      	; 0x5c2 <DIO_write+0x94>
 5ca:	80 95       	com	r24
 5cc:	82 23       	and	r24, r18
 5ce:	85 bb       	out	0x15, r24	; 21
 5d0:	08 95       	ret
		}
		else if (value==HIGH)
 5d2:	41 30       	cpi	r20, 0x01	; 1
 5d4:	29 f5       	brne	.+74     	; 0x620 <DIO_write+0xf2>
		{
			SET_BIT(PORTC,pinNumber);//write 1
 5d6:	25 b3       	in	r18, 0x15	; 21
 5d8:	81 e0       	ldi	r24, 0x01	; 1
 5da:	90 e0       	ldi	r25, 0x00	; 0
 5dc:	02 c0       	rjmp	.+4      	; 0x5e2 <DIO_write+0xb4>
 5de:	88 0f       	add	r24, r24
 5e0:	99 1f       	adc	r25, r25
 5e2:	6a 95       	dec	r22
 5e4:	e2 f7       	brpl	.-8      	; 0x5de <DIO_write+0xb0>
 5e6:	82 2b       	or	r24, r18
 5e8:	85 bb       	out	0x15, r24	; 21
 5ea:	08 95       	ret
		{
			//Error handling
		}
		break;
		case PORT_D:
		if (value==LOW)
 5ec:	41 11       	cpse	r20, r1
 5ee:	0c c0       	rjmp	.+24     	; 0x608 <DIO_write+0xda>
		{
			CLEAR_BIT(PORTD,pinNumber);//write 0
 5f0:	22 b3       	in	r18, 0x12	; 18
 5f2:	81 e0       	ldi	r24, 0x01	; 1
 5f4:	90 e0       	ldi	r25, 0x00	; 0
 5f6:	02 c0       	rjmp	.+4      	; 0x5fc <DIO_write+0xce>
 5f8:	88 0f       	add	r24, r24
 5fa:	99 1f       	adc	r25, r25
 5fc:	6a 95       	dec	r22
 5fe:	e2 f7       	brpl	.-8      	; 0x5f8 <DIO_write+0xca>
 600:	80 95       	com	r24
 602:	82 23       	and	r24, r18
 604:	82 bb       	out	0x12, r24	; 18
 606:	08 95       	ret
		}
		else if (value==HIGH)
 608:	41 30       	cpi	r20, 0x01	; 1
 60a:	51 f4       	brne	.+20     	; 0x620 <DIO_write+0xf2>
		{
			SET_BIT(PORTD,pinNumber);//write 1
 60c:	22 b3       	in	r18, 0x12	; 18
 60e:	81 e0       	ldi	r24, 0x01	; 1
 610:	90 e0       	ldi	r25, 0x00	; 0
 612:	02 c0       	rjmp	.+4      	; 0x618 <DIO_write+0xea>
 614:	88 0f       	add	r24, r24
 616:	99 1f       	adc	r25, r25
 618:	6a 95       	dec	r22
 61a:	e2 f7       	brpl	.-8      	; 0x614 <DIO_write+0xe6>
 61c:	82 2b       	or	r24, r18
 61e:	82 bb       	out	0x12, r24	; 18
 620:	08 95       	ret

00000622 <timer_init>:
uint8_t extinterrupt=0;

void timer_init(void)
{
	//Choose Timer Mode
	TCCR0=0x00; //Normal Mode
 622:	13 be       	out	0x33, r1	; 51
	//Timer set initial value
	TCNT0=0x00;
 624:	12 be       	out	0x32, r1	; 50
 626:	08 95       	ret

00000628 <timer0_delay_ms>:
}

void timer0_delay_ms(uint16_t delay)
{
 628:	8f 92       	push	r8
 62a:	9f 92       	push	r9
 62c:	af 92       	push	r10
 62e:	bf 92       	push	r11
 630:	cf 92       	push	r12
 632:	df 92       	push	r13
 634:	ef 92       	push	r14
 636:	ff 92       	push	r15
	//Calculate T_tick
	T_tick=prescaler/(CPU_CLOCK*1e3); //Result in ms
	//Calculate T_maxdelay
	T_maxdelay=T_tick*256; // Calculate Maximum Delay
	//Calculate number of overflows
	num_overflows=(delay)/(T_maxdelay); // Calculate number of overflows
 638:	bc 01       	movw	r22, r24
 63a:	80 e0       	ldi	r24, 0x00	; 0
 63c:	90 e0       	ldi	r25, 0x00	; 0
 63e:	0e 94 84 04 	call	0x908	; 0x908 <__floatunsisf>
 642:	6b 01       	movw	r12, r22
 644:	7c 01       	movw	r14, r24
 646:	2f e6       	ldi	r18, 0x6F	; 111
 648:	32 e1       	ldi	r19, 0x12	; 18
 64a:	43 e8       	ldi	r20, 0x83	; 131
 64c:	5e e3       	ldi	r21, 0x3E	; 62
 64e:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <__divsf3>
 652:	4b 01       	movw	r8, r22
 654:	5c 01       	movw	r10, r24
	//Calculate initial Value
	initialValue=256-(delay/T_tick)/num_overflows; //Calculate Timer Initial Value
 656:	2f e6       	ldi	r18, 0x6F	; 111
 658:	32 e1       	ldi	r19, 0x12	; 18
 65a:	43 e8       	ldi	r20, 0x83	; 131
 65c:	5a e3       	ldi	r21, 0x3A	; 58
 65e:	c7 01       	movw	r24, r14
 660:	b6 01       	movw	r22, r12
 662:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <__divsf3>
 666:	a5 01       	movw	r20, r10
 668:	94 01       	movw	r18, r8
 66a:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <__divsf3>
 66e:	9b 01       	movw	r18, r22
 670:	ac 01       	movw	r20, r24
 672:	60 e0       	ldi	r22, 0x00	; 0
 674:	70 e0       	ldi	r23, 0x00	; 0
 676:	80 e8       	ldi	r24, 0x80	; 128
 678:	93 e4       	ldi	r25, 0x43	; 67
 67a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__subsf3>
 67e:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixunssfsi>
	TCNT0=(int)initialValue; // Set Initial Value
 682:	62 bf       	out	0x32, r22	; 50
	//Timer start -> set prescaler
	TCCR0|=(1<<0);
 684:	83 b7       	in	r24, 0x33	; 51
 686:	81 60       	ori	r24, 0x01	; 1
 688:	83 bf       	out	0x33, r24	; 51
{

		uint16_t prescaler=1; // Assume No Prescaler
	
	float T_tick,T_maxdelay;
	float overflowcounter=0.0,num_overflows;
 68a:	c1 2c       	mov	r12, r1
 68c:	d1 2c       	mov	r13, r1
 68e:	76 01       	movw	r14, r12
	TCNT0=(int)initialValue; // Set Initial Value
	//Timer start -> set prescaler
	TCCR0|=(1<<0);
	
	//While loop to cycle through the delay as long as the ISR is not called
	while(overflowcounter<num_overflows && extinterrupt==0)
 690:	10 c0       	rjmp	.+32     	; 0x6b2 <timer0_delay_ms+0x8a>
	{
		//wait until the overflow flag to be set
	while((TIFR &(1<<0)) == 0);
 692:	08 b6       	in	r0, 0x38	; 56
 694:	00 fe       	sbrs	r0, 0
 696:	fd cf       	rjmp	.-6      	; 0x692 <timer0_delay_ms+0x6a>
	
	//Clear the overflow flag
	SET_BIT(TIFR,0);
 698:	88 b7       	in	r24, 0x38	; 56
 69a:	81 60       	ori	r24, 0x01	; 1
 69c:	88 bf       	out	0x38, r24	; 56
	
	overflowcounter++;
 69e:	20 e0       	ldi	r18, 0x00	; 0
 6a0:	30 e0       	ldi	r19, 0x00	; 0
 6a2:	40 e8       	ldi	r20, 0x80	; 128
 6a4:	5f e3       	ldi	r21, 0x3F	; 63
 6a6:	c7 01       	movw	r24, r14
 6a8:	b6 01       	movw	r22, r12
 6aa:	0e 94 72 03 	call	0x6e4	; 0x6e4 <__addsf3>
 6ae:	6b 01       	movw	r12, r22
 6b0:	7c 01       	movw	r14, r24
	TCNT0=(int)initialValue; // Set Initial Value
	//Timer start -> set prescaler
	TCCR0|=(1<<0);
	
	//While loop to cycle through the delay as long as the ISR is not called
	while(overflowcounter<num_overflows && extinterrupt==0)
 6b2:	a5 01       	movw	r20, r10
 6b4:	94 01       	movw	r18, r8
 6b6:	c7 01       	movw	r24, r14
 6b8:	b6 01       	movw	r22, r12
 6ba:	0e 94 de 03 	call	0x7bc	; 0x7bc <__cmpsf2>
 6be:	88 23       	and	r24, r24
 6c0:	24 f4       	brge	.+8      	; 0x6ca <timer0_delay_ms+0xa2>
 6c2:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <extinterrupt>
 6c6:	88 23       	and	r24, r24
 6c8:	21 f3       	breq	.-56     	; 0x692 <timer0_delay_ms+0x6a>
	//Clear the overflow flag
	SET_BIT(TIFR,0);
	
	overflowcounter++;
	}
	extinterrupt=0;
 6ca:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <extinterrupt>
	overflowcounter=0;
	
	
	//Timer Stop
	TCCR0=0x00;
 6ce:	13 be       	out	0x33, r1	; 51
 6d0:	ff 90       	pop	r15
 6d2:	ef 90       	pop	r14
 6d4:	df 90       	pop	r13
 6d6:	cf 90       	pop	r12
 6d8:	bf 90       	pop	r11
 6da:	af 90       	pop	r10
 6dc:	9f 90       	pop	r9
 6de:	8f 90       	pop	r8
 6e0:	08 95       	ret

000006e2 <__subsf3>:
 6e2:	50 58       	subi	r21, 0x80	; 128

000006e4 <__addsf3>:
 6e4:	bb 27       	eor	r27, r27
 6e6:	aa 27       	eor	r26, r26
 6e8:	0e 94 89 03 	call	0x712	; 0x712 <__addsf3x>
 6ec:	0c 94 fc 04 	jmp	0x9f8	; 0x9f8 <__fp_round>
 6f0:	0e 94 ee 04 	call	0x9dc	; 0x9dc <__fp_pscA>
 6f4:	38 f0       	brcs	.+14     	; 0x704 <__addsf3+0x20>
 6f6:	0e 94 f5 04 	call	0x9ea	; 0x9ea <__fp_pscB>
 6fa:	20 f0       	brcs	.+8      	; 0x704 <__addsf3+0x20>
 6fc:	39 f4       	brne	.+14     	; 0x70c <__addsf3+0x28>
 6fe:	9f 3f       	cpi	r25, 0xFF	; 255
 700:	19 f4       	brne	.+6      	; 0x708 <__addsf3+0x24>
 702:	26 f4       	brtc	.+8      	; 0x70c <__addsf3+0x28>
 704:	0c 94 eb 04 	jmp	0x9d6	; 0x9d6 <__fp_nan>
 708:	0e f4       	brtc	.+2      	; 0x70c <__addsf3+0x28>
 70a:	e0 95       	com	r30
 70c:	e7 fb       	bst	r30, 7
 70e:	0c 94 e5 04 	jmp	0x9ca	; 0x9ca <__fp_inf>

00000712 <__addsf3x>:
 712:	e9 2f       	mov	r30, r25
 714:	0e 94 0d 05 	call	0xa1a	; 0xa1a <__fp_split3>
 718:	58 f3       	brcs	.-42     	; 0x6f0 <__addsf3+0xc>
 71a:	ba 17       	cp	r27, r26
 71c:	62 07       	cpc	r22, r18
 71e:	73 07       	cpc	r23, r19
 720:	84 07       	cpc	r24, r20
 722:	95 07       	cpc	r25, r21
 724:	20 f0       	brcs	.+8      	; 0x72e <__addsf3x+0x1c>
 726:	79 f4       	brne	.+30     	; 0x746 <__addsf3x+0x34>
 728:	a6 f5       	brtc	.+104    	; 0x792 <__addsf3x+0x80>
 72a:	0c 94 2f 05 	jmp	0xa5e	; 0xa5e <__fp_zero>
 72e:	0e f4       	brtc	.+2      	; 0x732 <__addsf3x+0x20>
 730:	e0 95       	com	r30
 732:	0b 2e       	mov	r0, r27
 734:	ba 2f       	mov	r27, r26
 736:	a0 2d       	mov	r26, r0
 738:	0b 01       	movw	r0, r22
 73a:	b9 01       	movw	r22, r18
 73c:	90 01       	movw	r18, r0
 73e:	0c 01       	movw	r0, r24
 740:	ca 01       	movw	r24, r20
 742:	a0 01       	movw	r20, r0
 744:	11 24       	eor	r1, r1
 746:	ff 27       	eor	r31, r31
 748:	59 1b       	sub	r21, r25
 74a:	99 f0       	breq	.+38     	; 0x772 <__addsf3x+0x60>
 74c:	59 3f       	cpi	r21, 0xF9	; 249
 74e:	50 f4       	brcc	.+20     	; 0x764 <__addsf3x+0x52>
 750:	50 3e       	cpi	r21, 0xE0	; 224
 752:	68 f1       	brcs	.+90     	; 0x7ae <__addsf3x+0x9c>
 754:	1a 16       	cp	r1, r26
 756:	f0 40       	sbci	r31, 0x00	; 0
 758:	a2 2f       	mov	r26, r18
 75a:	23 2f       	mov	r18, r19
 75c:	34 2f       	mov	r19, r20
 75e:	44 27       	eor	r20, r20
 760:	58 5f       	subi	r21, 0xF8	; 248
 762:	f3 cf       	rjmp	.-26     	; 0x74a <__addsf3x+0x38>
 764:	46 95       	lsr	r20
 766:	37 95       	ror	r19
 768:	27 95       	ror	r18
 76a:	a7 95       	ror	r26
 76c:	f0 40       	sbci	r31, 0x00	; 0
 76e:	53 95       	inc	r21
 770:	c9 f7       	brne	.-14     	; 0x764 <__addsf3x+0x52>
 772:	7e f4       	brtc	.+30     	; 0x792 <__addsf3x+0x80>
 774:	1f 16       	cp	r1, r31
 776:	ba 0b       	sbc	r27, r26
 778:	62 0b       	sbc	r22, r18
 77a:	73 0b       	sbc	r23, r19
 77c:	84 0b       	sbc	r24, r20
 77e:	ba f0       	brmi	.+46     	; 0x7ae <__addsf3x+0x9c>
 780:	91 50       	subi	r25, 0x01	; 1
 782:	a1 f0       	breq	.+40     	; 0x7ac <__addsf3x+0x9a>
 784:	ff 0f       	add	r31, r31
 786:	bb 1f       	adc	r27, r27
 788:	66 1f       	adc	r22, r22
 78a:	77 1f       	adc	r23, r23
 78c:	88 1f       	adc	r24, r24
 78e:	c2 f7       	brpl	.-16     	; 0x780 <__addsf3x+0x6e>
 790:	0e c0       	rjmp	.+28     	; 0x7ae <__addsf3x+0x9c>
 792:	ba 0f       	add	r27, r26
 794:	62 1f       	adc	r22, r18
 796:	73 1f       	adc	r23, r19
 798:	84 1f       	adc	r24, r20
 79a:	48 f4       	brcc	.+18     	; 0x7ae <__addsf3x+0x9c>
 79c:	87 95       	ror	r24
 79e:	77 95       	ror	r23
 7a0:	67 95       	ror	r22
 7a2:	b7 95       	ror	r27
 7a4:	f7 95       	ror	r31
 7a6:	9e 3f       	cpi	r25, 0xFE	; 254
 7a8:	08 f0       	brcs	.+2      	; 0x7ac <__addsf3x+0x9a>
 7aa:	b0 cf       	rjmp	.-160    	; 0x70c <__addsf3+0x28>
 7ac:	93 95       	inc	r25
 7ae:	88 0f       	add	r24, r24
 7b0:	08 f0       	brcs	.+2      	; 0x7b4 <__addsf3x+0xa2>
 7b2:	99 27       	eor	r25, r25
 7b4:	ee 0f       	add	r30, r30
 7b6:	97 95       	ror	r25
 7b8:	87 95       	ror	r24
 7ba:	08 95       	ret

000007bc <__cmpsf2>:
 7bc:	0e 94 c1 04 	call	0x982	; 0x982 <__fp_cmp>
 7c0:	08 f4       	brcc	.+2      	; 0x7c4 <__cmpsf2+0x8>
 7c2:	81 e0       	ldi	r24, 0x01	; 1
 7c4:	08 95       	ret

000007c6 <__divsf3>:
 7c6:	0e 94 f7 03 	call	0x7ee	; 0x7ee <__divsf3x>
 7ca:	0c 94 fc 04 	jmp	0x9f8	; 0x9f8 <__fp_round>
 7ce:	0e 94 f5 04 	call	0x9ea	; 0x9ea <__fp_pscB>
 7d2:	58 f0       	brcs	.+22     	; 0x7ea <__divsf3+0x24>
 7d4:	0e 94 ee 04 	call	0x9dc	; 0x9dc <__fp_pscA>
 7d8:	40 f0       	brcs	.+16     	; 0x7ea <__divsf3+0x24>
 7da:	29 f4       	brne	.+10     	; 0x7e6 <__divsf3+0x20>
 7dc:	5f 3f       	cpi	r21, 0xFF	; 255
 7de:	29 f0       	breq	.+10     	; 0x7ea <__divsf3+0x24>
 7e0:	0c 94 e5 04 	jmp	0x9ca	; 0x9ca <__fp_inf>
 7e4:	51 11       	cpse	r21, r1
 7e6:	0c 94 30 05 	jmp	0xa60	; 0xa60 <__fp_szero>
 7ea:	0c 94 eb 04 	jmp	0x9d6	; 0x9d6 <__fp_nan>

000007ee <__divsf3x>:
 7ee:	0e 94 0d 05 	call	0xa1a	; 0xa1a <__fp_split3>
 7f2:	68 f3       	brcs	.-38     	; 0x7ce <__divsf3+0x8>

000007f4 <__divsf3_pse>:
 7f4:	99 23       	and	r25, r25
 7f6:	b1 f3       	breq	.-20     	; 0x7e4 <__divsf3+0x1e>
 7f8:	55 23       	and	r21, r21
 7fa:	91 f3       	breq	.-28     	; 0x7e0 <__divsf3+0x1a>
 7fc:	95 1b       	sub	r25, r21
 7fe:	55 0b       	sbc	r21, r21
 800:	bb 27       	eor	r27, r27
 802:	aa 27       	eor	r26, r26
 804:	62 17       	cp	r22, r18
 806:	73 07       	cpc	r23, r19
 808:	84 07       	cpc	r24, r20
 80a:	38 f0       	brcs	.+14     	; 0x81a <__DATA_REGION_LENGTH__+0x1a>
 80c:	9f 5f       	subi	r25, 0xFF	; 255
 80e:	5f 4f       	sbci	r21, 0xFF	; 255
 810:	22 0f       	add	r18, r18
 812:	33 1f       	adc	r19, r19
 814:	44 1f       	adc	r20, r20
 816:	aa 1f       	adc	r26, r26
 818:	a9 f3       	breq	.-22     	; 0x804 <__DATA_REGION_LENGTH__+0x4>
 81a:	35 d0       	rcall	.+106    	; 0x886 <__stack+0x27>
 81c:	0e 2e       	mov	r0, r30
 81e:	3a f0       	brmi	.+14     	; 0x82e <__DATA_REGION_LENGTH__+0x2e>
 820:	e0 e8       	ldi	r30, 0x80	; 128
 822:	32 d0       	rcall	.+100    	; 0x888 <__stack+0x29>
 824:	91 50       	subi	r25, 0x01	; 1
 826:	50 40       	sbci	r21, 0x00	; 0
 828:	e6 95       	lsr	r30
 82a:	00 1c       	adc	r0, r0
 82c:	ca f7       	brpl	.-14     	; 0x820 <__DATA_REGION_LENGTH__+0x20>
 82e:	2b d0       	rcall	.+86     	; 0x886 <__stack+0x27>
 830:	fe 2f       	mov	r31, r30
 832:	29 d0       	rcall	.+82     	; 0x886 <__stack+0x27>
 834:	66 0f       	add	r22, r22
 836:	77 1f       	adc	r23, r23
 838:	88 1f       	adc	r24, r24
 83a:	bb 1f       	adc	r27, r27
 83c:	26 17       	cp	r18, r22
 83e:	37 07       	cpc	r19, r23
 840:	48 07       	cpc	r20, r24
 842:	ab 07       	cpc	r26, r27
 844:	b0 e8       	ldi	r27, 0x80	; 128
 846:	09 f0       	breq	.+2      	; 0x84a <__DATA_REGION_LENGTH__+0x4a>
 848:	bb 0b       	sbc	r27, r27
 84a:	80 2d       	mov	r24, r0
 84c:	bf 01       	movw	r22, r30
 84e:	ff 27       	eor	r31, r31
 850:	93 58       	subi	r25, 0x83	; 131
 852:	5f 4f       	sbci	r21, 0xFF	; 255
 854:	3a f0       	brmi	.+14     	; 0x864 <__stack+0x5>
 856:	9e 3f       	cpi	r25, 0xFE	; 254
 858:	51 05       	cpc	r21, r1
 85a:	78 f0       	brcs	.+30     	; 0x87a <__stack+0x1b>
 85c:	0c 94 e5 04 	jmp	0x9ca	; 0x9ca <__fp_inf>
 860:	0c 94 30 05 	jmp	0xa60	; 0xa60 <__fp_szero>
 864:	5f 3f       	cpi	r21, 0xFF	; 255
 866:	e4 f3       	brlt	.-8      	; 0x860 <__stack+0x1>
 868:	98 3e       	cpi	r25, 0xE8	; 232
 86a:	d4 f3       	brlt	.-12     	; 0x860 <__stack+0x1>
 86c:	86 95       	lsr	r24
 86e:	77 95       	ror	r23
 870:	67 95       	ror	r22
 872:	b7 95       	ror	r27
 874:	f7 95       	ror	r31
 876:	9f 5f       	subi	r25, 0xFF	; 255
 878:	c9 f7       	brne	.-14     	; 0x86c <__stack+0xd>
 87a:	88 0f       	add	r24, r24
 87c:	91 1d       	adc	r25, r1
 87e:	96 95       	lsr	r25
 880:	87 95       	ror	r24
 882:	97 f9       	bld	r25, 7
 884:	08 95       	ret
 886:	e1 e0       	ldi	r30, 0x01	; 1
 888:	66 0f       	add	r22, r22
 88a:	77 1f       	adc	r23, r23
 88c:	88 1f       	adc	r24, r24
 88e:	bb 1f       	adc	r27, r27
 890:	62 17       	cp	r22, r18
 892:	73 07       	cpc	r23, r19
 894:	84 07       	cpc	r24, r20
 896:	ba 07       	cpc	r27, r26
 898:	20 f0       	brcs	.+8      	; 0x8a2 <__stack+0x43>
 89a:	62 1b       	sub	r22, r18
 89c:	73 0b       	sbc	r23, r19
 89e:	84 0b       	sbc	r24, r20
 8a0:	ba 0b       	sbc	r27, r26
 8a2:	ee 1f       	adc	r30, r30
 8a4:	88 f7       	brcc	.-30     	; 0x888 <__stack+0x29>
 8a6:	e0 95       	com	r30
 8a8:	08 95       	ret

000008aa <__fixunssfsi>:
 8aa:	0e 94 15 05 	call	0xa2a	; 0xa2a <__fp_splitA>
 8ae:	88 f0       	brcs	.+34     	; 0x8d2 <__fixunssfsi+0x28>
 8b0:	9f 57       	subi	r25, 0x7F	; 127
 8b2:	98 f0       	brcs	.+38     	; 0x8da <__fixunssfsi+0x30>
 8b4:	b9 2f       	mov	r27, r25
 8b6:	99 27       	eor	r25, r25
 8b8:	b7 51       	subi	r27, 0x17	; 23
 8ba:	b0 f0       	brcs	.+44     	; 0x8e8 <__fixunssfsi+0x3e>
 8bc:	e1 f0       	breq	.+56     	; 0x8f6 <__fixunssfsi+0x4c>
 8be:	66 0f       	add	r22, r22
 8c0:	77 1f       	adc	r23, r23
 8c2:	88 1f       	adc	r24, r24
 8c4:	99 1f       	adc	r25, r25
 8c6:	1a f0       	brmi	.+6      	; 0x8ce <__fixunssfsi+0x24>
 8c8:	ba 95       	dec	r27
 8ca:	c9 f7       	brne	.-14     	; 0x8be <__fixunssfsi+0x14>
 8cc:	14 c0       	rjmp	.+40     	; 0x8f6 <__fixunssfsi+0x4c>
 8ce:	b1 30       	cpi	r27, 0x01	; 1
 8d0:	91 f0       	breq	.+36     	; 0x8f6 <__fixunssfsi+0x4c>
 8d2:	0e 94 2f 05 	call	0xa5e	; 0xa5e <__fp_zero>
 8d6:	b1 e0       	ldi	r27, 0x01	; 1
 8d8:	08 95       	ret
 8da:	0c 94 2f 05 	jmp	0xa5e	; 0xa5e <__fp_zero>
 8de:	67 2f       	mov	r22, r23
 8e0:	78 2f       	mov	r23, r24
 8e2:	88 27       	eor	r24, r24
 8e4:	b8 5f       	subi	r27, 0xF8	; 248
 8e6:	39 f0       	breq	.+14     	; 0x8f6 <__fixunssfsi+0x4c>
 8e8:	b9 3f       	cpi	r27, 0xF9	; 249
 8ea:	cc f3       	brlt	.-14     	; 0x8de <__fixunssfsi+0x34>
 8ec:	86 95       	lsr	r24
 8ee:	77 95       	ror	r23
 8f0:	67 95       	ror	r22
 8f2:	b3 95       	inc	r27
 8f4:	d9 f7       	brne	.-10     	; 0x8ec <__fixunssfsi+0x42>
 8f6:	3e f4       	brtc	.+14     	; 0x906 <__fixunssfsi+0x5c>
 8f8:	90 95       	com	r25
 8fa:	80 95       	com	r24
 8fc:	70 95       	com	r23
 8fe:	61 95       	neg	r22
 900:	7f 4f       	sbci	r23, 0xFF	; 255
 902:	8f 4f       	sbci	r24, 0xFF	; 255
 904:	9f 4f       	sbci	r25, 0xFF	; 255
 906:	08 95       	ret

00000908 <__floatunsisf>:
 908:	e8 94       	clt
 90a:	09 c0       	rjmp	.+18     	; 0x91e <__floatsisf+0x12>

0000090c <__floatsisf>:
 90c:	97 fb       	bst	r25, 7
 90e:	3e f4       	brtc	.+14     	; 0x91e <__floatsisf+0x12>
 910:	90 95       	com	r25
 912:	80 95       	com	r24
 914:	70 95       	com	r23
 916:	61 95       	neg	r22
 918:	7f 4f       	sbci	r23, 0xFF	; 255
 91a:	8f 4f       	sbci	r24, 0xFF	; 255
 91c:	9f 4f       	sbci	r25, 0xFF	; 255
 91e:	99 23       	and	r25, r25
 920:	a9 f0       	breq	.+42     	; 0x94c <__floatsisf+0x40>
 922:	f9 2f       	mov	r31, r25
 924:	96 e9       	ldi	r25, 0x96	; 150
 926:	bb 27       	eor	r27, r27
 928:	93 95       	inc	r25
 92a:	f6 95       	lsr	r31
 92c:	87 95       	ror	r24
 92e:	77 95       	ror	r23
 930:	67 95       	ror	r22
 932:	b7 95       	ror	r27
 934:	f1 11       	cpse	r31, r1
 936:	f8 cf       	rjmp	.-16     	; 0x928 <__floatsisf+0x1c>
 938:	fa f4       	brpl	.+62     	; 0x978 <__floatsisf+0x6c>
 93a:	bb 0f       	add	r27, r27
 93c:	11 f4       	brne	.+4      	; 0x942 <__floatsisf+0x36>
 93e:	60 ff       	sbrs	r22, 0
 940:	1b c0       	rjmp	.+54     	; 0x978 <__floatsisf+0x6c>
 942:	6f 5f       	subi	r22, 0xFF	; 255
 944:	7f 4f       	sbci	r23, 0xFF	; 255
 946:	8f 4f       	sbci	r24, 0xFF	; 255
 948:	9f 4f       	sbci	r25, 0xFF	; 255
 94a:	16 c0       	rjmp	.+44     	; 0x978 <__floatsisf+0x6c>
 94c:	88 23       	and	r24, r24
 94e:	11 f0       	breq	.+4      	; 0x954 <__floatsisf+0x48>
 950:	96 e9       	ldi	r25, 0x96	; 150
 952:	11 c0       	rjmp	.+34     	; 0x976 <__floatsisf+0x6a>
 954:	77 23       	and	r23, r23
 956:	21 f0       	breq	.+8      	; 0x960 <__floatsisf+0x54>
 958:	9e e8       	ldi	r25, 0x8E	; 142
 95a:	87 2f       	mov	r24, r23
 95c:	76 2f       	mov	r23, r22
 95e:	05 c0       	rjmp	.+10     	; 0x96a <__floatsisf+0x5e>
 960:	66 23       	and	r22, r22
 962:	71 f0       	breq	.+28     	; 0x980 <__floatsisf+0x74>
 964:	96 e8       	ldi	r25, 0x86	; 134
 966:	86 2f       	mov	r24, r22
 968:	70 e0       	ldi	r23, 0x00	; 0
 96a:	60 e0       	ldi	r22, 0x00	; 0
 96c:	2a f0       	brmi	.+10     	; 0x978 <__floatsisf+0x6c>
 96e:	9a 95       	dec	r25
 970:	66 0f       	add	r22, r22
 972:	77 1f       	adc	r23, r23
 974:	88 1f       	adc	r24, r24
 976:	da f7       	brpl	.-10     	; 0x96e <__floatsisf+0x62>
 978:	88 0f       	add	r24, r24
 97a:	96 95       	lsr	r25
 97c:	87 95       	ror	r24
 97e:	97 f9       	bld	r25, 7
 980:	08 95       	ret

00000982 <__fp_cmp>:
 982:	99 0f       	add	r25, r25
 984:	00 08       	sbc	r0, r0
 986:	55 0f       	add	r21, r21
 988:	aa 0b       	sbc	r26, r26
 98a:	e0 e8       	ldi	r30, 0x80	; 128
 98c:	fe ef       	ldi	r31, 0xFE	; 254
 98e:	16 16       	cp	r1, r22
 990:	17 06       	cpc	r1, r23
 992:	e8 07       	cpc	r30, r24
 994:	f9 07       	cpc	r31, r25
 996:	c0 f0       	brcs	.+48     	; 0x9c8 <__fp_cmp+0x46>
 998:	12 16       	cp	r1, r18
 99a:	13 06       	cpc	r1, r19
 99c:	e4 07       	cpc	r30, r20
 99e:	f5 07       	cpc	r31, r21
 9a0:	98 f0       	brcs	.+38     	; 0x9c8 <__fp_cmp+0x46>
 9a2:	62 1b       	sub	r22, r18
 9a4:	73 0b       	sbc	r23, r19
 9a6:	84 0b       	sbc	r24, r20
 9a8:	95 0b       	sbc	r25, r21
 9aa:	39 f4       	brne	.+14     	; 0x9ba <__fp_cmp+0x38>
 9ac:	0a 26       	eor	r0, r26
 9ae:	61 f0       	breq	.+24     	; 0x9c8 <__fp_cmp+0x46>
 9b0:	23 2b       	or	r18, r19
 9b2:	24 2b       	or	r18, r20
 9b4:	25 2b       	or	r18, r21
 9b6:	21 f4       	brne	.+8      	; 0x9c0 <__fp_cmp+0x3e>
 9b8:	08 95       	ret
 9ba:	0a 26       	eor	r0, r26
 9bc:	09 f4       	brne	.+2      	; 0x9c0 <__fp_cmp+0x3e>
 9be:	a1 40       	sbci	r26, 0x01	; 1
 9c0:	a6 95       	lsr	r26
 9c2:	8f ef       	ldi	r24, 0xFF	; 255
 9c4:	81 1d       	adc	r24, r1
 9c6:	81 1d       	adc	r24, r1
 9c8:	08 95       	ret

000009ca <__fp_inf>:
 9ca:	97 f9       	bld	r25, 7
 9cc:	9f 67       	ori	r25, 0x7F	; 127
 9ce:	80 e8       	ldi	r24, 0x80	; 128
 9d0:	70 e0       	ldi	r23, 0x00	; 0
 9d2:	60 e0       	ldi	r22, 0x00	; 0
 9d4:	08 95       	ret

000009d6 <__fp_nan>:
 9d6:	9f ef       	ldi	r25, 0xFF	; 255
 9d8:	80 ec       	ldi	r24, 0xC0	; 192
 9da:	08 95       	ret

000009dc <__fp_pscA>:
 9dc:	00 24       	eor	r0, r0
 9de:	0a 94       	dec	r0
 9e0:	16 16       	cp	r1, r22
 9e2:	17 06       	cpc	r1, r23
 9e4:	18 06       	cpc	r1, r24
 9e6:	09 06       	cpc	r0, r25
 9e8:	08 95       	ret

000009ea <__fp_pscB>:
 9ea:	00 24       	eor	r0, r0
 9ec:	0a 94       	dec	r0
 9ee:	12 16       	cp	r1, r18
 9f0:	13 06       	cpc	r1, r19
 9f2:	14 06       	cpc	r1, r20
 9f4:	05 06       	cpc	r0, r21
 9f6:	08 95       	ret

000009f8 <__fp_round>:
 9f8:	09 2e       	mov	r0, r25
 9fa:	03 94       	inc	r0
 9fc:	00 0c       	add	r0, r0
 9fe:	11 f4       	brne	.+4      	; 0xa04 <__fp_round+0xc>
 a00:	88 23       	and	r24, r24
 a02:	52 f0       	brmi	.+20     	; 0xa18 <__fp_round+0x20>
 a04:	bb 0f       	add	r27, r27
 a06:	40 f4       	brcc	.+16     	; 0xa18 <__fp_round+0x20>
 a08:	bf 2b       	or	r27, r31
 a0a:	11 f4       	brne	.+4      	; 0xa10 <__fp_round+0x18>
 a0c:	60 ff       	sbrs	r22, 0
 a0e:	04 c0       	rjmp	.+8      	; 0xa18 <__fp_round+0x20>
 a10:	6f 5f       	subi	r22, 0xFF	; 255
 a12:	7f 4f       	sbci	r23, 0xFF	; 255
 a14:	8f 4f       	sbci	r24, 0xFF	; 255
 a16:	9f 4f       	sbci	r25, 0xFF	; 255
 a18:	08 95       	ret

00000a1a <__fp_split3>:
 a1a:	57 fd       	sbrc	r21, 7
 a1c:	90 58       	subi	r25, 0x80	; 128
 a1e:	44 0f       	add	r20, r20
 a20:	55 1f       	adc	r21, r21
 a22:	59 f0       	breq	.+22     	; 0xa3a <__fp_splitA+0x10>
 a24:	5f 3f       	cpi	r21, 0xFF	; 255
 a26:	71 f0       	breq	.+28     	; 0xa44 <__fp_splitA+0x1a>
 a28:	47 95       	ror	r20

00000a2a <__fp_splitA>:
 a2a:	88 0f       	add	r24, r24
 a2c:	97 fb       	bst	r25, 7
 a2e:	99 1f       	adc	r25, r25
 a30:	61 f0       	breq	.+24     	; 0xa4a <__fp_splitA+0x20>
 a32:	9f 3f       	cpi	r25, 0xFF	; 255
 a34:	79 f0       	breq	.+30     	; 0xa54 <__fp_splitA+0x2a>
 a36:	87 95       	ror	r24
 a38:	08 95       	ret
 a3a:	12 16       	cp	r1, r18
 a3c:	13 06       	cpc	r1, r19
 a3e:	14 06       	cpc	r1, r20
 a40:	55 1f       	adc	r21, r21
 a42:	f2 cf       	rjmp	.-28     	; 0xa28 <__fp_split3+0xe>
 a44:	46 95       	lsr	r20
 a46:	f1 df       	rcall	.-30     	; 0xa2a <__fp_splitA>
 a48:	08 c0       	rjmp	.+16     	; 0xa5a <__fp_splitA+0x30>
 a4a:	16 16       	cp	r1, r22
 a4c:	17 06       	cpc	r1, r23
 a4e:	18 06       	cpc	r1, r24
 a50:	99 1f       	adc	r25, r25
 a52:	f1 cf       	rjmp	.-30     	; 0xa36 <__fp_splitA+0xc>
 a54:	86 95       	lsr	r24
 a56:	71 05       	cpc	r23, r1
 a58:	61 05       	cpc	r22, r1
 a5a:	08 94       	sec
 a5c:	08 95       	ret

00000a5e <__fp_zero>:
 a5e:	e8 94       	clt

00000a60 <__fp_szero>:
 a60:	bb 27       	eor	r27, r27
 a62:	66 27       	eor	r22, r22
 a64:	77 27       	eor	r23, r23
 a66:	cb 01       	movw	r24, r22
 a68:	97 f9       	bld	r25, 7
 a6a:	08 95       	ret

00000a6c <__umulhisi3>:
 a6c:	a2 9f       	mul	r26, r18
 a6e:	b0 01       	movw	r22, r0
 a70:	b3 9f       	mul	r27, r19
 a72:	c0 01       	movw	r24, r0
 a74:	a3 9f       	mul	r26, r19
 a76:	70 0d       	add	r23, r0
 a78:	81 1d       	adc	r24, r1
 a7a:	11 24       	eor	r1, r1
 a7c:	91 1d       	adc	r25, r1
 a7e:	b2 9f       	mul	r27, r18
 a80:	70 0d       	add	r23, r0
 a82:	81 1d       	adc	r24, r1
 a84:	11 24       	eor	r1, r1
 a86:	91 1d       	adc	r25, r1
 a88:	08 95       	ret

00000a8a <_exit>:
 a8a:	f8 94       	cli

00000a8c <__stop_program>:
 a8c:	ff cf       	rjmp	.-2      	; 0xa8c <__stop_program>
